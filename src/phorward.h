/* -HEADER----------------------------------------------------------------------
Phorward C/C++ Library
Copyright (C) 2006-2019 by Phorward Software Technologies, Jan Max Meyer
https://phorward.info ++ contact<at>phorward<dash>software<dot>com
All rights reserved. See LICENSE for more information.

File:	phorward.h
Usage:	Phorward C/C++ Library Global Header
----------------------------------------------------------------------------- */

/*
	This file was automatically generated by pinclude.
	DO NOT CHANGE THIS FILE MANUALLY. IT WILL GO AWAY!
*/


#ifndef _PHORWARD_H
#define _PHORWARD_H


#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <ctype.h>
#include <limits.h>

#ifdef UTF8
#include <wchar.h>
#endif

#ifdef UNICODE
#include <wctype.h>
#endif

#ifdef _WIN32
#include <process.h>
#else
#include <unistd.h>
#endif



typedef char 					pboolean;	
#ifndef BOOLEAN
#define BOOLEAN					pboolean
#endif

#ifndef boolean
#define boolean 				pboolean
#endif

#ifndef TRUE
#define TRUE					1
#endif

#ifndef FALSE
#define FALSE					0
#endif

#define BOOLEAN_STR( b ) 		( ( b ) ? "TRUE" : "FALSE" )
#define TRUEBOOLEAN( b ) 		( ( b ) ? TRUE : FALSE )


#define OUTOFMEM				fprintf( stderr, \
									"%s, %d: Ran out of memory\n", \
										__FILE__, __LINE__ ), exit( 1 )

#define WRONGPARAM				fprintf( stderr, \
									"%s, %d: Function called with wrong or " \
									"incomplete parameters, fix your call!\n", \
										__FILE__, __LINE__ )

#define MISSINGCASE				fprintf( stderr, \
									"%s, %d: Missing case engaged, " \
									"please check for correctness.\n", \
									__FILE__, __LINE__ )

#define TODO					fprintf( stderr, \
									"%s, %d: TODO alert! The program ran into "\
									"a module that is not finished yet!\n", \
											__FILE__, __LINE__ )

#define CORE					{ 	int* x = NULL; \
									fprintf( stderr, \
									"%s, %d: !CORE!\n", __FILE__, __LINE__ ); \
									*x = 123; \
								}


#ifndef _WIN32
#define PDIRSEP					':'
#define PPATHSEP				'/'
#else
#define PDIRSEP					';'
#define PPATHSEP				'\\'
#endif




#define LIBPHORWARD_VERSION "0.25.0"




#ifndef _DBG_H
#define _DBG_H


#ifdef DEBUG
	#define PROC( name ) \
		static char*	_dbg_proc_name	= name; \
		_dbg_trace( __FILE__, __LINE__, "ENTRY", _dbg_proc_name, (char*)NULL )
#else
	#define PROC( name )
#endif


#ifdef DEBUG
	#define RETURN( val ) \
		do \
		{ \
			_dbg_trace( __FILE__, __LINE__, \
				"RETURN", _dbg_proc_name, (char*)NULL ); \
			return val; \
		} \
		while( 0 )
#else
	#define RETURN( val ) return val
#endif


#ifdef DEBUG
	#define VOIDRET \
		do \
		{ \
			_dbg_trace( __FILE__, __LINE__, \
				"RETURN", _dbg_proc_name, (char*)NULL ); \
			return; \
		} \
		while( 0 )
#else
	#define VOIDRET return
#endif


#ifdef DEBUG
	#define MSG( text ) \
		_dbg_trace( __FILE__, __LINE__, "MSG", _dbg_proc_name, "%s", text )
#else
	#define MSG( text )
#endif


#ifdef DEBUG
	#define VARS( name, format, val ) \
		_dbg_trace( __FILE__, __LINE__, "VARS", _dbg_proc_name, \
				"%s = >" format "<", name, val )
#else
	#define VARS( name, format, val )
#endif


#ifdef DEBUG
	#define PARMS( name, format, val ) \
		_dbg_trace( __FILE__, __LINE__, "PARMS", _dbg_proc_name, \
			"%s = >" format "<", name, val )
#else
	#define PARMS( name, format, val )
#endif


#ifdef DEBUG
	#define LOG( format, ... ) \
		_dbg_trace( __FILE__, __LINE__, "LOG", _dbg_proc_name, \
			format, __VA_ARGS__ )
#else
	#define LOG( name, ... )
#endif

#endif



#ifndef PARRAY_H
#define PARRAY_H

typedef struct
{
	void*	array;
	size_t	first;
	size_t	last;
	size_t	count;

	size_t	size;
	size_t	chunk;
} parray;

typedef void (*parrayfn)	( void* );		





#define parray_for( array, ptr )	\
	for( (ptr) = parray_first( array ); (ptr); \
			(ptr) = parray_next( array, ptr ) )

#endif



#ifndef PLIST_H
#define PLIST_H


typedef struct Plist		plist;			
typedef struct Plistel		plistel;		
typedef void (*plistelfn)	( plistel* );	
typedef void (*plistfn)		( void* );		


struct Plistel
{
	int						flags;
	char*					key;

	plistel*				prev;
	plistel*				next;

	plistel*				hashnext;
	plistel*				hashprev;
};


struct Plist
{
	int						flags;
#define PLIST_MOD_NONE		0	
#define PLIST_MOD_PTR		1	
#define PLIST_MOD_RECYCLE	2	
#define PLIST_MOD_AUTOSORT	4	
#define PLIST_MOD_EXTKEYS	8	
#define PLIST_MOD_PTRKEYS	16	
#define PLIST_MOD_KEEPKEYS	32	
#define PLIST_MOD_UNIQUE	64	
#define PLIST_MOD_WCHAR		128	

	size_t					size;
	long					count;
	int						hashsize;

	int						size_index;

	int						(*comparefn)( plist*, plistel*, plistel* );
	int						(*sortfn)( plist*, plistel*, plistel* );
	void					(*printfn)( plist* );

	plistel*				unused;

	plistel*				first;
	plistel*				last;
	plistel**				hash;

	
	int						load_factor;
	int						free_hash_entries;
	int						hash_collisions;
	long					recycled;
};





#define plist_for( l, e )	\
	for( (e) = plist_first( l ); (e); (e) = plist_next( e ) )

#endif 




#define PCCL_MIN			0x0
#if UNICODE
#define PCCL_MAX			0xFFFF
#else
#define PCCL_MAX			0xFF
#endif

typedef struct
{
	wchar_t			begin;
	wchar_t			end;
} pcrange;

typedef struct
{
	int				min;
	int				max;

	plist*			ranges;

	char*			str;
} pccl;






#define PREGEX_ALLOC_STEP		16
#define PREGEX_MAXREF			32




#define PREGEX_COMP_WCHAR		0x01	
#define PREGEX_COMP_NOANCHORS	0x02	
#define PREGEX_COMP_NOREF		0x04	
#define PREGEX_COMP_NONGREEDY	0x08	
#define PREGEX_COMP_NOERRORS	0x10	
#define PREGEX_COMP_INSENSITIVE	0x20	
#define PREGEX_COMP_STATIC		0x40	
#define PREGEX_COMP_PTN			0x80	


#define PREGEX_RUN_WCHAR		0x100	
#define	PREGEX_RUN_UCHAR		0x200	
#define PREGEX_RUN_NOANCHORS	0x400	
#define PREGEX_RUN_NOREF		0x800	
#define PREGEX_RUN_NONGREEDY	0x1000	
#define PREGEX_RUN_DEBUG		0x2000 	


#define PREGEX_FLAG_NONE		0x00	
#define PREGEX_FLAG_BOL			0x01	
#define PREGEX_FLAG_EOL			0x02	
#define PREGEX_FLAG_BOW			0x04	
#define PREGEX_FLAG_EOW			0x08	
#define PREGEX_FLAG_NONGREEDY	0x10	


enum _regex_ptntype
{
	PREGEX_PTN_NULL,
	PREGEX_PTN_CHAR,
	PREGEX_PTN_SUB,
	PREGEX_PTN_REFSUB,
	PREGEX_PTN_ALT,
	PREGEX_PTN_KLE,
	PREGEX_PTN_POS,
	PREGEX_PTN_OPT
};


typedef struct	_regex_nfa_st	pregex_nfa_st;
typedef struct	_regex_nfa		pregex_nfa;

typedef struct	_regex_dfa_tr	pregex_dfa_tr;
typedef struct	_regex_dfa_st	pregex_dfa_st;
typedef struct	_regex_dfa		pregex_dfa;

typedef enum 	_regex_ptntype	pregex_ptntype;
typedef struct	_regex_ptn		pregex_ptn;

typedef struct	_range			prange;
typedef struct	_regex			pregex;
typedef struct	_lex			plex;
typedef struct	_lexctx			plexctx;




struct _regex_nfa_st
{
	pccl*			ccl;		
	pregex_nfa_st*	next;		
	pregex_nfa_st*	next2;		

	unsigned int	accept;		
	int				flags;		
	int				refs;		
};


struct _regex_nfa
{
	plist*			states;		
	int				modifiers;	
};


struct _regex_dfa_tr
{
	pccl*			ccl;		
	unsigned int	go_to;		
};


struct _regex_dfa_st
{
	plist*			trans;		
	pregex_dfa_tr*	def_trans;	

	unsigned int	accept;		
	int				flags;		
	int				refs;		
};


struct _regex_dfa
{
	plist*			states;		
};



struct _regex_ptn
{
	pregex_ptntype	type;		
	pccl*			ccl;		

	pregex_ptn*		child[ 2 ];	
	pregex_ptn*		next;		

	unsigned int	accept;		
	int				flags;		

	char*			str;		
};




struct _range
{
	unsigned int	id;			
	char*			start;		
	char*			end;		
};


struct _regex
{
	int				flags;		
	pregex_ptn*		ptn;		

	int				trans_cnt;	
	wchar_t**		trans;		

	prange			ref			[ PREGEX_MAXREF ];
};



struct _lex
{
	int				flags;		
	plist*			ptns;		

	int				trans_cnt;	
	wchar_t**		trans;		

	prange			ref			[ PREGEX_MAXREF ];
};


struct _lexctx
{
	plex*			lex;		

	int				handle;		
	int				state;		
	prange			ref			[ PREGEX_MAXREF ];
};




#ifdef __cplusplus
extern "C"
{
#endif


pboolean parray_init( parray* array, size_t size, size_t chunk );
parray* parray_create( size_t size, size_t chunk );
pboolean parray_erase( parray* array );
parray* parray_free( parray* array );
void* parray_push( parray* array, void* item );
pboolean parray_reserve( parray* array, size_t n );
void* parray_malloc( parray* array );
void* parray_rmalloc( parray* array );
void* parray_insert( parray* array, size_t offset, void* item );
void* parray_remove( parray* array, size_t offset, void** item );
void* parray_pop( parray* array );
void* parray_unshift( parray* array, void* item );
void* parray_shift( parray* array );
void* parray_get( parray* array, size_t offset );
void* parray_put( parray* array, size_t offset, void* item );
void* parray_rget( parray* array, size_t offset );
void* parray_rput( parray* array, size_t offset, void* item );
void parray_iter( parray* array, parrayfn callback );
void parray_riter( parray* array, parrayfn callback );
void* parray_first( parray* array );
void* parray_last( parray* array );
void* parray_next( parray* array, void* ptr );
void* parray_prev( parray* array, void* ptr );
void* parray_swap( parray* array, size_t pos1, size_t pos2 );
size_t parray_count( parray* array );
pboolean parray_partof( parray* array, void* ptr );
size_t parray_offset( parray* array, void* ptr );


pccl* pccl_create( int min, int max, char* ccldef );
pboolean pccl_compat( pccl* l, pccl* r );
int pccl_size( pccl* ccl );
int pccl_count( pccl* ccl );
pccl* pccl_dup( pccl* ccl );
pboolean pccl_testrange( pccl* ccl, wchar_t begin, wchar_t end );
pboolean pccl_test( pccl* ccl, wchar_t ch );
pboolean pccl_instest( pccl* ccl, wchar_t ch );
pboolean pccl_addrange( pccl* ccl, wchar_t begin, wchar_t end );
pboolean pccl_add( pccl* ccl, wchar_t ch );
pboolean pccl_delrange( pccl* ccl, wchar_t begin, wchar_t end );
pboolean pccl_del( pccl* ccl, wchar_t ch );
pccl* pccl_negate( pccl* ccl );
pccl* pccl_union( pccl* ccl, pccl* add );
pccl* pccl_diff( pccl* ccl, pccl* rem );
int pccl_compare( pccl* left, pccl* right );
pccl* pccl_intersect( pccl* ccl, pccl* within );
pboolean pccl_get( wchar_t* from, wchar_t* to, pccl* ccl, int offset );
size_t pccl_parsechar( wchar_t* retc, char *str, pboolean escapeseq );
pboolean pccl_parseshorthand( pccl* ccl, char** str );
pboolean pccl_parse( pccl* ccl, char* ccldef, pboolean extend );
pboolean pccl_erase( pccl* ccl );
pccl* pccl_free( pccl* ccl );
char* pccl_to_str( pccl* ccl, pboolean escape );
void pccl_print( FILE* stream, pccl* ccl, int break_after );


pboolean _dbg_trace_enabled( char* file, char* function );
void _dbg_trace( char* file, int line, char* type, char* function, char* format, ... );


pboolean plist_init( plist* list, size_t size, int flags );
plist* plist_create( size_t size, int flags );
plist* plist_dup( plist* list );
pboolean plist_erase( plist* list );
pboolean plist_clear( plist* list );
plist* plist_free( plist* list );
plistel* plist_insert( plist* list, plistel* pos, char* key, void* src );
plistel* plist_push( plist* list, void* src );
plistel* plist_shift( plist* list, void* src );
void* plist_malloc( plist* list );
void* plist_rmalloc( plist* list );
pboolean plist_remove( plist* list, plistel* e );
pboolean plist_pop( plist* list, void* dest );
pboolean plist_unshift( plist* list, void* dest );
plistel* plist_get( plist* list, size_t n );
plistel* plist_getkey( plist* list, size_t n );
plistel* plist_rget( plist* list, size_t n );
plistel* plist_get_by_key( plist* list, char* key );
plistel* plist_get_by_nkey( plist* list, char* key, size_t n );
plistel* plist_get_by_ptr( plist* list, void* ptr );
size_t plist_concat( plist* dest, plist* src );
void plist_iter( plist* list, plistelfn callback );
void plist_riter( plist* list, plistelfn callback );
void plist_iter_access( plist* list, plistfn callback );
void plist_riter_access( plist* list, plistfn callback );
size_t plist_union( plist* all, plist* from );
int plist_diff( plist* left, plist* right );
pboolean plist_subsort( plist* list, plistel* from, plistel* to );
pboolean plist_sort( plist* list );
pboolean plist_set_comparefn( plist* list, int (*comparefn)( plist*, plistel*, plistel* ) );
pboolean plist_set_sortfn( plist* list, int (*sortfn)( plist*, plistel*, plistel* ) );
pboolean plist_set_printfn( plist* list, void (*printfn)( plist* ) );
void* plist_access( plistel* e );
char* plist_key( plistel* e );
plistel* plist_next( plistel* u );
plistel* plist_prev( plistel* u );
plistel* plist_hashnext( plistel* u );
plistel* plist_hashprev( plistel* u );
int plist_offset( plistel* u );
pboolean plist_swap( plist* l, plistel* a, plistel* b );
plistel* plist_first( plist* l );
plistel* plist_last( plist* l );
int plist_size( plist* l );
int plist_count( plist* l );
void plist_dbgstats( FILE* stream, plist* list );


void* pmalloc( size_t size );
void* prealloc( void* oldptr, size_t size );
void* pfree( void* ptr );
void* pmemdup( void* ptr, size_t size );


char* pwhich( char* filename, char* directories );
char* pbasename( char* path );
pboolean pfileexists( char* filename );
pboolean pfiletostr( char** cont, char* filename );
int pgetopt( char* opt, char** param, int* next, int argc, char** argv, char* optstr, char* loptstr, int idx );
size_t pgetline( char** lineptr, size_t* n, FILE* stream );


void pregex_dfa_print( pregex_dfa* dfa );
pregex_dfa* pregex_dfa_create( void );
pboolean pregex_dfa_reset( pregex_dfa* dfa );
pregex_dfa* pregex_dfa_free( pregex_dfa* dfa );
int pregex_dfa_from_nfa( pregex_dfa* dfa, pregex_nfa* nfa );
int pregex_dfa_minimize( pregex_dfa* dfa );
int pregex_dfa_match( pregex_dfa* dfa, char* str, size_t* len, int* mflags, prange** ref, int* ref_count, int flags );
int pregex_dfa_to_dfatab( wchar_t*** dfatab, pregex_dfa* dfa );


int pregex_qmatch( char* regex, char* str, int flags, parray** matches );
int pregex_qsplit( char* regex, char* str, int flags, parray** matches );
char* pregex_qreplace( char* regex, char* str, char* replace, int flags );


plex* plex_create( int flags );
plex* plex_free( plex* lex );
pboolean plex_reset( plex* lex );
pboolean plex_prepare( plex* lex );
pregex_ptn* plex_define( plex* lex, char* pat, int match_id, int flags );
int plex_lex( plex* lex, char* start, char** end );
char* plex_next( plex* lex, char* start, unsigned int* id, char** end );
size_t plex_tokenize( plex* lex, char* start, parray** matches );
void plex_dump_dot( FILE* stream, plex* lex );
plexctx* plexctx_init( plexctx* ctx, plex* lex );
plexctx* plexctx_create( plex* lex );
plexctx* plexctx_reset( plexctx* ctx );
plexctx* plexctx_free( plexctx* ctx );
pboolean plexctx_lex( plexctx* ctx, wchar_t ch );


pboolean pregex_check_anchors( char* all, char* str, size_t len, int anchors, int flags );


pregex_nfa_st* pregex_nfa_create_state( pregex_nfa* nfa, char* chardef, int flags );
void pregex_nfa_print( pregex_nfa* nfa );
pregex_nfa* pregex_nfa_create( void );
pboolean pregex_nfa_reset( pregex_nfa* nfa );
pregex_nfa* pregex_nfa_free( pregex_nfa* nfa );
int pregex_nfa_move( pregex_nfa* nfa, plist* hits, wchar_t from, wchar_t to );
int pregex_nfa_epsilon_closure( pregex_nfa* nfa, plist* closure, unsigned int* accept, int* flags );
int pregex_nfa_match( pregex_nfa* nfa, char* str, size_t* len, int* mflags, prange** ref, int* ref_count, int flags );
pboolean pregex_nfa_from_string( pregex_nfa* nfa, char* str, int flags, int acc );


pregex_ptn* pregex_ptn_create( char* pat, int flags );
pregex_ptn* pregex_ptn_create_char( pccl* ccl );
pregex_ptn* pregex_ptn_create_string( char* str, int flags );
pregex_ptn* pregex_ptn_create_sub( pregex_ptn* ptn );
pregex_ptn* pregex_ptn_create_refsub( pregex_ptn* ptn );
pregex_ptn* pregex_ptn_create_alt( pregex_ptn* left, ... );
pregex_ptn* pregex_ptn_create_kle( pregex_ptn* ptn );
pregex_ptn* pregex_ptn_create_pos( pregex_ptn* ptn );
pregex_ptn* pregex_ptn_create_opt( pregex_ptn* ptn );
pregex_ptn* pregex_ptn_create_seq( pregex_ptn* first, ... );
pregex_ptn* pregex_ptn_dup( pregex_ptn* ptn );
pregex_ptn* pregex_ptn_free( pregex_ptn* ptn );
void pregex_ptn_print( pregex_ptn* ptn, int rec );
char* pregex_ptn_to_regex( pregex_ptn* ptn );
pboolean pregex_ptn_to_nfa( pregex_nfa* nfa, pregex_ptn* ptn );
pboolean pregex_ptn_to_dfa( pregex_dfa* dfa, pregex_ptn* ptn );
int pregex_ptn_to_dfatab( wchar_t*** dfatab, pregex_ptn* ptn );
pboolean pregex_ptn_parse( pregex_ptn** ptn, char* str, int flags );


pregex* pregex_create( char* pat, int flags );
pregex* pregex_free( pregex* regex );
pboolean pregex_match( pregex* regex, char* start, char** end );
char* pregex_find( pregex* regex, char* start, char** end );
int pregex_findall( pregex* regex, char* start, parray** matches );
char* pregex_split( pregex* regex, char* start, char** end, char** next );
int pregex_splitall( pregex* regex, char* start, parray** matches );
char* pregex_replace( pregex* regex, char* str, char* replacement );


char* pwcs_to_str( wchar_t* str, pboolean freestr );
wchar_t* pstr_to_wcs( char* str, pboolean freestr );
char* pdbl_to_str( double d );
#ifdef UNICODE
wchar_t* pdbl_to_wcs( double d );
#endif


char* pstrcatchar( char* str, char chr );
char* pstrcatstr( char* dest, char* src, pboolean freesrc );
char* pstrncatstr( char* str, char* append, size_t n );
char* pstrreplace( char* str, char* find, char* replace );
char* pstrdup( char* str );
char* pstrndup( char* str, size_t len );
size_t pstrlen( char* str );
char* pstrput( char** str, char* val );
char* pstrget( char* str );
char* pstrrender( char* tpl, ... );
char* pstrltrim( char* s );
char* pstrrtrim( char* s );
char* pstrtrim( char* s );
int pstrsplit( char*** tokens, char* str, char* sep, int limit );
char* pstrupr( char* s );
char* pstrlwr( char* s );
int pstrcasecmp( char* s1, char* s2 );
int pstrncasecmp( char* s1, char* s2, size_t n );
char* pstrunescape( char* str );
int pvasprintf( char** str, char* fmt, va_list ap );
char* pasprintf( char* fmt, ... );
#ifdef UNICODE
wchar_t* pwcsdup( wchar_t* str );
wchar_t* pwcscatchar( wchar_t* str, wchar_t chr );
wchar_t* pwcscatstr( wchar_t* dest, wchar_t* src, pboolean freesrc );
wchar_t* pwcsncatstr( wchar_t* str, wchar_t* append, size_t n );
size_t pwcslen( wchar_t* str );
wchar_t* pwcsput( wchar_t** str, wchar_t* val );
wchar_t* pwcsget( wchar_t* str );
wchar_t* pwcsndup( wchar_t* str, size_t len );
int pvawcsprintf( wchar_t** str, wchar_t* fmt, va_list ap );
wchar_t* pawcsprintf( wchar_t* fmt, ... );
#endif 


pboolean putf8_isutf( unsigned char c );
int putf8_seqlen(char *s);
wchar_t putf8_char( char* str );
char* putf8_move( char* str, int count );
wchar_t putf8_parse_char( char** ch );
int putf8_toucs(wchar_t *dest, int sz, char *src, int srcsz);
int putf8_toutf8(char *dest, int sz, wchar_t *src, int srcsz);
int putf8_wc_toutf8(char *dest, wchar_t ch);
int putf8_offset(char *str, int charnum);
int putf8_charnum(char *s, int offset);
int putf8_strlen(char *s);
wchar_t putf8_nextchar(char *s, int *i);
void putf8_inc(char *s, int *i);
void putf8_dec(char *s, int *i);
int octal_digit(char c);
int hex_digit(char c);
int putf8_read_escape_sequence(char *str, wchar_t *dest);
int putf8_unescape(char *buf, int sz, char *src);
int putf8_escape_wchar(char *buf, int sz, wchar_t ch);
int putf8_escape(char *buf, int sz, char *src, int escape_quotes);
char *putf8_strchr(char *s, wchar_t ch, int *charn);
char *putf8_memchr(char *s, wchar_t ch, size_t sz, int *charn);
int putf8_is_locale_utf8(char *locale);



#ifdef __cplusplus
}
#endif

#endif 

